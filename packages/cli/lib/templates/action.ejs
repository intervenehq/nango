<%
    const isArrayInterfaceNames = Array.isArray(interfaceNames);
    const isArrayMappings = Array.isArray(mappings);
    const isArrayInputs = Array.isArray(inputs);

    const formattedInterfaceNames = isArrayInterfaceNames ? interfaceNames.join(', ') : interfaceNames;
    const javascriptPrimitives = ['string', 'number', 'boolean', 'bigint', 'symbol', 'undefined', 'object', 'null'];
    const filteredInputs = isArrayInputs ? inputs.filter(input => !javascriptPrimitives.includes(input)) : inputs;

    const formattedInputs = isArrayInputs ? filteredInputs.join(', ') : (javascriptPrimitives.includes(inputs) ? '' : inputs);

    let returnTypes = 'void';
    if (isArrayMappings && mappings.length > 0) {
        if (mappings.length === 1) {
            returnTypes = `${mappings[0].name}[]`;
        } else {
            returnTypes = '{' + mappings.map(mapping => `${mapping.name}: ${mapping.type}[]`).join(', ') + '}';
        }
    } else if (typeof mappings === 'object') {
        returnTypes = `${mappings.name}`;
    }

    let paramInputs = 'object';
    let optionalInput = '?';
    if (inputs) {
        optionalInput = '';

        if (isArrayInputs) {
            paramInputs = `${inputs}[];`
        } else {
            paramInputs = inputs;
        }
    }
%>
import type { NangoAction<%= formattedInterfaceNames ? ', ' + formattedInterfaceNames : '' %><%= formattedInputs ? ', ' + formattedInputs : '' %> } from './<%= interfaceFileName %>';

export default async function runAction(nango: NangoAction, input<%= optionalInput %>: <%= paramInputs %>): Promise<<%= returnTypes %>> {
    // Integration code goes here
}
